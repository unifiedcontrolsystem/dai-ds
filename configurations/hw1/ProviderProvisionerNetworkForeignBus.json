{
  "providerClassMap": {
    "bootEventData": "com.intel.dai.provisioners.NetworkListenerProviderForeignBus"
  },

  "networkStreams": {
    "stateChangeSource": {
      "arguments": {
        "bootstrap.servers": "admin:9092",
        "group.id": "boot_states",
        "schema.registry.url": "http://admin:8081",
        "enable.auto.commit": "false",
        "auto.offset.reset": "earliest",
        "topics": "stateChanges"
      },
      "name": "kafka"
    }
  },

  "adapterProfiles": {
    "default": {
      "networkStreamsRef": [
        "stateChangeSource"
      ],
      "subjects": [
        "*"
      ],
      "adapterProvider": "bootEventData"
    }
  },

  "providerConfigurations": {
    "com.intel.dai.network_listener.NetworkListenerSystemActions": {
      "sourceType": "rabbitmq",
      "exchangeName": "ucs",
      "uri": "amqp://am01-nmn.local"
    },
    "com.intel.dai.provisioners.NetworkListenerProviderForeignBus": {
      "publishTopic": "ucs_boot_event",
      "informWorkLoadManager": false,
      "bootParametersInfoUrl": "https://api-gw-service-nmn.local/apis/bss/boot/v1/bootparameters",
      "bootParameterForLocationInfoUrl": "https://api-gw-service-nmn.local/apis/bss/boot/v1/bootparameters?name=",
      "bootImageInfoUrl" : "https://api-gw-service-nmn.local/apis/ims/images",
      "bootImageForImageIdInfoUrl" : "https://api-gw-service-nmn.local/apis/ims/images/",
      "publish": true
    },
    "com.intel.dai.provisioners.AdapterProvisionerApi": {
      "informWorkLoadManager": false,
      "nodeStateInfoUrl" : "http://api-gw-service-nmn.local/apis/smd/hsm/v1/State/Components",
      "nodeStateForLocationInfoUrl" : "http://api-gw-service-nmn.local/apis/smd/hsm/v1/State/Components/",
      "tokenAuthProvider": "com.intel.authentication.KeycloakTokenAuthentication",
      "tokenServer": "https://api-gw-service-nmn.local/keycloak/",
      "clientId": "admin-client",
      "clientSecret": "dd0f8dee-f40b-4b16-a5dd-af2ed1b8a99c",
      "realm": "shasta"
    }
  },

  "subjectMap": {
    "telemetry": "EnvironmentalData",
    "inventoryChanges": "InventoryChangeEvent",
    "logs": "LogData",
    "events": "RasEvent",
    "stateChanges": "StateChangeEvent"
  }
}
