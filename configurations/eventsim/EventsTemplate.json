{
  "event-types": {
    "energy": {
      "template": "/resources/templates/telemetry-energy.json" ,
      "stream-id": "energyTelemetry",
      "stream-type": "energyTelemetry" ,
      "update-template": true,
      "single-template": {
        "metrics/messages[*]/Events[*]/Oem/Sensors[?]/PhysicalContext": ".*" ,
        "metrics/messages[*]/Events[*]/Oem/Sensors[?]/Location": ".*"
      },
      "single-template-count": {
        "metrics/messages[*]/Events[*]" : 1,
        "metrics/messages[*]" : 1
      },
      "path-count" : {
        "metrics/messages[*]/Events[*]/Oem/Sensors[*]" : 4,
        "metrics/messages[*]/Events[*]" : 1,
        "metrics/messages[*]" : 5
      },
      "update-fields": {
        "metrics/messages[*]/Events[*]/Oem/Sensors[*]": {
          "Location": {
            "metadata": "DB-Locations" ,
            "metadata-filter": ".*"
          } ,
          "Value": {
            "metadata": "Integer" ,
            "metadata-filter": [10, 12]
          }
        }
      },
      "generate-data-and-overflow-path" : {
        "metrics/messages[*]/Events[*]/Oem/Sensors[*]" : "metrics/messages[*]",
        "metrics/messages[*]" : "new"
      },
      "timestamp" : "metrics/messages[?]/Events[?]/Oem/Sensors[?]/Timestamp"
    },

    "fabric-perf": {
      "template": "/resources/templates/fabric-perf-telemetry.json" ,
      "stream-id": "fabricPerf",
      "stream-type": "fabricPerf" ,
      "update-template": true,
      "single-template": {
        "metrics/messages[*]/Events[*]/Oem/Sensors[?]/DeviceSpecificContext": ".*" ,
        "metrics/messages[*]/Events[*]/Oem/Sensors[?]/Location": ".*"
      },
      "single-template-count": {
        "metrics/messages[*]/Events[*]" : 1,
        "metrics/messages[*]" : 1
      },
      "path-count" : {
        "metrics/messages[*]/Events[*]/Oem/Sensors[*]" : 96,
        "metrics/messages[*]/Events[*]" : 1,
        "metrics/messages[*]" : 16
      },
      "update-fields": {
        "metrics/messages[*]/Events[*]/Oem/Sensors[*]": {
          "Location": {
            "metadata": "DB-Locations" ,
            "metadata-filter": ".*"
          } ,
          "Value": {
            "metadata": "Integer" ,
            "metadata-filter": [10, 12]
          }
        }
      },
      "generate-data-and-overflow-path" : {
        "metrics/messages[*]/Events[*]/Oem/Sensors[*]" : "metrics/messages[*]",
        "metrics/messages[*]" : "new"
      },
      "timestamp" : "metrics/messages[?]/Events[?]/Oem/Sensors[?]/Timestamp"
    },

    "off": {
      "template": "/resources/templates/boot_state_off.json" ,
      "stream-id": "stateChange",
      "stream-type": "stateChange" ,
      "update-template": false,
      "single-template": {
        "metrics/messages[?]/Flag": ".*" ,
        "metrics/messages[?]/State": ".*"
      },
      "single-template-count": {
        "metrics/messages[*]":1
      },
      "path-count" : {
        "metrics/messages[*]" : 1
      },
      "update-fields": {
        "metrics/messages[*]": {
          "Components[]": {
            "metadata": "DB-Locations" ,
            "metadata-filter": ".*"
          },
          "State": {
            "metadata": "/resources/metadata/ForeignStateChangeStates.json" ,
            "metadata-filter": "Off"
          }
        }
      },
      "generate-data-and-overflow-path" : {
        "metrics/messages[*]" : "new"
      },
      "timestamp" : "@timestamp"
    },

    "on": {
      "template": "/resources/templates/boot_state_on.json" ,
      "stream-id": "stateChange",
      "stream-type": "stateChange" ,
      "update-template": false,
      "single-template": {
        "metrics/messages[?]/Flag": ".*" ,
        "metrics/messages[?]/State": ".*"
      },
      "single-template-count": {
        "metrics/messages[*]":1
      },
      "path-count" : {
        "metrics/messages[*]" : 1
      },
      "update-fields": {
        "metrics/messages[*]": {
          "Components[]": {
            "metadata": "DB-Locations" ,
            "metadata-filter": ".*"
          },
          "State": {
            "metadata": "/resources/metadata/ForeignStateChangeStates.json" ,
            "metadata-filter": "On"
          }
        }
      },
      "generate-data-and-overflow-path" : {
        "metrics/messages[*]" : "new"
      },
      "timestamp" : "@timestamp"
    },

    "ready": {
      "template": "/resources/templates/boot_state_ready.json" ,
      "stream-id": "stateChange",
      "stream-type": "stateChange" ,
      "update-template": false,
      "single-template": {
        "metrics/messages[?]/Flag": ".*" ,
        "metrics/messages[?]/State": ".*"
      },
      "single-template-count": {
        "metrics/messages[*]":1
      },
      "path-count" : {
        "metrics/messages[*]" : 1
      },
      "update-fields": {
        "metrics/messages[*]": {
          "Components[]": {
            "metadata": "DB-Locations" ,
            "metadata-filter": ".*"
          },
          "State": {
            "metadata": "/resources/metadata/ForeignStateChangeStates.json" ,
            "metadata-filter": "Ready"
          }
        }
      },
      "generate-data-and-overflow-path" : {
        "metrics/messages[*]" : "new"
      },
      "timestamp" : "@timestamp"
    },

    "old-ras": {
      "template": "/resources/templates/old-ras.json" ,
      "stream-id": "dmtfEvent",
      "stream-type": "dmtfEvent" ,
      "update-template": true,
      "single-template": {
        "message[?]/seqnum": ".*" ,
        "message[?]/pri": ".*"
      },
      "single-template-count": {
        "message[*]":1
      },
      "path-count" : {
        "message[*]" : 1
      },
      "update-fields": {
        "message[*]": {
          "event-type": {
            "metadata": "/resources/metadata/ForeignEventMetaDataArray.json" ,
            "metadata-filter": ".*"
          } ,
          "location": {
            "metadata": "DB-Locations" ,
            "metadata-filter": ".*"
          }
        }
      },
      "generate-data-and-overflow-path" : {
        "message[*]" : "new"
      },
      "timestamp" : "message[?]/timestamp"
    },

    "power": {
      "template": "/resources/templates/telemetry-power.json" ,
      "stream-id": "powerTelemetry",
      "stream-type": "powerTelemetry" ,
      "update-template": true,
      "single-template": {
        "metrics/messages[*]/Events[*]/Oem/Sensors[?]/PhysicalContext": ".*" ,
        "metrics/messages[*]/Events[*]/Oem/Sensors[?]/Location": ".*"
      },
      "single-template-count": {
        "metrics/messages[*]/Events[*]" : 1,
        "metrics/messages[*]" : 1
      },
      "path-count" : {
        "metrics/messages[*]/Events[*]/Oem/Sensors[*]" : 1,
        "metrics/messages[*]/Events[*]" : 2,
        "metrics/messages[*]" : 11
      },
      "update-fields": {
        "metrics/messages[*]/Events[*]/Oem/Sensors[*]": {
          "Location": {
            "metadata": "DB-Locations" ,
            "metadata-filter": ".*"
          } ,
          "Value": {
            "metadata": "Integer" ,
            "metadata-filter": [10, 12]
          }
        }
      },
      "generate-data-and-overflow-path" : {
        "metrics/messages[*]/Events[*]/Oem/Sensors[*]" : "metrics/messages[*]/Events[*]",
        "metrics/messages[*]/Events[*]" : "metrics/messages[*]",
        "metrics/messages[*]" : "new"
      },
      "timestamp" : "metrics/messages[?]/Events[?]/Oem/Sensors[?]/Timestamp"
    },

    "temperature": {
      "template": "/resources/templates/telemetry-temperature.json" ,
      "stream-id": "temperatureTelemetry",
      "stream-type": "temperatureTelemetry" ,
      "update-template": true,
      "single-template": {
        "metrics/messages[*]/Events[*]/Oem/Sensors[?]/PhysicalContext": ".*" ,
        "metrics/messages[*]/Events[*]/Oem/Sensors[?]/Location": ".*"
      },
      "single-template-count": {
        "metrics/messages[*]/Events[*]" : 1,
        "metrics/messages[*]" : 1
      },
      "path-count" : {
        "metrics/messages[*]/Events[*]/Oem/Sensors[*]" : 25,
        "metrics/messages[*]/Events[*]" : 1,
        "metrics/messages[*]" : 11
      },
      "update-fields": {
        "metrics/messages[*]/Events[*]/Oem/Sensors[*]": {
          "Location": {
            "metadata": "DB-Locations" ,
            "metadata-filter": ".*"
          } ,
          "Value": {
            "metadata": "Integer" ,
            "metadata-filter": [10, 12]
          }
        }
      },
      "generate-data-and-overflow-path" : {
        "metrics/messages[*]/Events[*]/Oem/Sensors[*]" : "metrics/messages[*]",
        "metrics/messages[*]" : "new"
      },
      "timestamp" : "metrics/messages[?]/Events[?]/Oem/Sensors[?]/Timestamp"
    },

    "voltage": {
      "template": "/resources/templates/telemetry-voltage.json" ,
      "stream-id": "voltageTelemetry",
      "stream-type": "voltageTelemetry" ,
      "update-template": true,
      "single-template": {
        "metrics/messages[*]/Events[*]/Oem/Sensors[?]/PhysicalContext": ".*" ,
        "metrics/messages[*]/Events[*]/Oem/Sensors[?]/Location": ".*"
      },
      "single-template-count": {
        "metrics/messages[*]/Events[*]" : 1,
        "metrics/messages[*]" : 1
      },
      "path-count" : {
        "metrics/messages[*]/Events[*]/Oem/Sensors[*]" : 28,
        "metrics/messages[*]/Events[*]" : 1,
        "metrics/messages[*]" : 4
      },
      "update-fields": {
        "metrics/messages[*]/Events[*]/Oem/Sensors[*]": {
          "Location": {
            "metadata": "DB-Locations" ,
            "metadata-filter": ".*"
          } ,
          "Value": {
            "metadata": "Integer" ,
            "metadata-filter": [10, 12]
          }
        }
      },
      "generate-data-and-overflow-path" : {
        "metrics/messages[*]/Events[*]/Oem/Sensors[*]" : "metrics/messages[*]",
        "metrics/messages[*]" : "new"
      },
      "timestamp" : "metrics/messages[?]/Events[?]/Oem/Sensors[?]/Timestamp"
    }
  }
}